// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import client "github.com/influxdata/influxdb/client/v2"
import mock "github.com/stretchr/testify/mock"
import time "time"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: timeout
func (_m *Client) Ping(timeout time.Duration) (time.Duration, string, error) {
	ret := _m.Called(timeout)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(time.Duration) time.Duration); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(time.Duration) string); ok {
		r1 = rf(timeout)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(time.Duration) error); ok {
		r2 = rf(timeout)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Query provides a mock function with given fields: q
func (_m *Client) Query(q client.Query) (*client.Response, error) {
	ret := _m.Called(q)

	var r0 *client.Response
	if rf, ok := ret.Get(0).(func(client.Query) *client.Response); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(client.Query) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryAsChunk provides a mock function with given fields: q
func (_m *Client) QueryAsChunk(q client.Query) (*client.ChunkedResponse, error) {
	ret := _m.Called(q)

	var r0 *client.ChunkedResponse
	if rf, ok := ret.Get(0).(func(client.Query) *client.ChunkedResponse); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ChunkedResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(client.Query) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write provides a mock function with given fields: bp
func (_m *Client) Write(bp client.BatchPoints) error {
	ret := _m.Called(bp)

	var r0 error
	if rf, ok := ret.Get(0).(func(client.BatchPoints) error); ok {
		r0 = rf(bp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
